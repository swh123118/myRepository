package tiku.myapp.com.questions.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANSWER_BEAN".
*/
public class AnswerBeanDao extends AbstractDao<AnswerBean, Void> {

    public static final String TABLENAME = "ANSWER_BEAN";

    /**
     * Properties of entity AnswerBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AnswerID = new Property(0, int.class, "answerID", false, "ANSWERID");
        public final static Property Answernum = new Property(1, int.class, "answernum", false, "ANSWERNUM");
        public final static Property Answer = new Property(2, String.class, "answer", false, "ANSWER");
    }


    public AnswerBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AnswerBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANSWER_BEAN\" (" + //
                "\"ANSWERID\" INTEGER NOT NULL ," + // 0: answerID
                "\"ANSWERNUM\" INTEGER NOT NULL ," + // 1: answernum
                "\"ANSWER\" TEXT);"); // 2: answer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANSWER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AnswerBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAnswerID());
        stmt.bindLong(2, entity.getAnswernum());
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(3, answer);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AnswerBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAnswerID());
        stmt.bindLong(2, entity.getAnswernum());
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(3, answer);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AnswerBean readEntity(Cursor cursor, int offset) {
        AnswerBean entity = new AnswerBean( //
            cursor.getInt(offset + 0), // answerID
            cursor.getInt(offset + 1), // answernum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // answer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AnswerBean entity, int offset) {
        entity.setAnswerID(cursor.getInt(offset + 0));
        entity.setAnswernum(cursor.getInt(offset + 1));
        entity.setAnswer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AnswerBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AnswerBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(AnswerBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
